### Starting build.
# Target: main.ml.depends, tags: { package(tsdl,tsdl_mixer), extension:ml, file:main.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules main.ml > main.ml.depends # cached
# Target: camera.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:camera.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules camera.mli > camera.mli.depends # cached
# Target: objet.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:objet.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules objet.mli > objet.mli.depends # cached
# Target: sound.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:sound.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules sound.mli > sound.mli.depends # cached
# Target: sound.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:sound.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o sound.cmi sound.mli # cached
# Target: objet.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:objet.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o objet.cmi objet.mli # cached
# Target: scene.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:scene.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules scene.mli > scene.mli.depends
# Target: music.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:music.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules music.mli > music.mli.depends # cached
# Target: music.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:music.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o music.cmi music.mli # cached
# Target: unit.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:unit.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules unit.mli > unit.mli.depends
# Target: unit.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:unit.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o unit.cmi unit.mli
# Target: scene.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:scene.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o scene.cmi scene.mli
# Target: display.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:display.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules display.mli > display.mli.depends # cached
# Target: button.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:button.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules button.mli > button.mli.depends # cached
# Target: button.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:button.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o button.cmi button.mli # cached
# Target: camera.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:camera.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o camera.cmi camera.mli
# Target: menu.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:menu.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules menu.mli > menu.mli.depends # cached
# Target: menu.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:menu.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o menu.cmi menu.mli # cached
# Target: keyboard.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:keyboard.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules keyboard.mli > keyboard.mli.depends # cached
# Target: movement.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:movement.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules movement.mli > movement.mli.depends # cached
# Target: tool.mli.depends, tags: { package(tsdl,tsdl_mixer), extension:mli, file:tool.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package tsdl,tsdl_mixer -modules tool.mli > tool.mli.depends # cached
# Target: tool.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:tool.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o tool.cmi tool.mli # cached
# Target: display.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:display.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o display.cmi display.mli
# Target: keyboard.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:keyboard.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o keyboard.cmi keyboard.mli
# Target: movement.cmi, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:mli, file:movement.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o movement.cmi movement.mli
# Target: main.cmo, tags: { package(tsdl,tsdl_mixer), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o main.cmo main.ml
+ ocamlfind ocamlc -c -package tsdl,tsdl_mixer -o main.cmo main.ml
File "main.ml", line 36, characters 10-20:
Error: Unbound value get_player
Command exited with code 2.
# Compilation unsuccessful.
